<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="bi bi-folder2-open"></i> Navegador de Arquivos
        </h1>
    </div>
</div>

<!-- Barra de Ferramentas -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control" id="searchInput" placeholder="Buscar arquivos...">
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-primary" onclick="createFolder()">
                                <i class="bi bi-folder-plus"></i> Nova Pasta
                            </button>
                            <button type="button" class="btn btn-info" onclick="refreshCurrentPath()">
                                <i class="bi bi-arrow-clockwise"></i> Atualizar
                            </button>
                            <button type="button" class="btn btn-secondary" onclick="toggleHiddenFiles()">
                                <i class="bi bi-eye"></i> Ocultos
                            </button>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        <button type="button" class="btn btn-success" onclick="selectCurrentPath()">
                            <i class="bi bi-check-circle"></i> Selecionar Pasta
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Breadcrumbs -->
<div class="row mb-3">
    <div class="col-12">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb" id="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="#" onclick="navigateToPath('/mnt')">
                        <i class="bi bi-hdd"></i> Discos
                    </a>
                </li>
            </ol>
        </nav>
    </div>
</div>

<!-- Conteúdo Principal -->
<div class="row">
    <!-- Lista de Discos -->
    <div class="col-md-3">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="bi bi-hdd"></i> Discos Disponíveis
                </h6>
            </div>
            <div class="card-body p-0">
                <div class="list-group list-group-flush" id="disksList">
                    <!-- Discos serão carregados aqui -->
                </div>
                <div class="card-footer">
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="testLoadDisks()">
                        <i class="bi bi-arrow-clockwise"></i> Testar Carregamento
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Conteúdo da Pasta -->
    <div class="col-md-9">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6 class="mb-0">
                    <i class="bi bi-folder"></i> 
                    <span id="currentPathDisplay">Selecione um disco</span>
                </h6>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-secondary" onclick="navigateToParent()">
                        <i class="bi bi-arrow-up"></i> Pasta Pai
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="navigateToHome()">
                        <i class="bi bi-hdd"></i> Discos
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 50px;"></th>
                                <th>Nome</th>
                                <th>Tamanho</th>
                                <th>Modificado</th>
                                <th>Permissões</th>
                                <th style="width: 120px;">Ações</th>
                            </tr>
                        </thead>
                        <tbody id="filesList">
                            <tr>
                                <td colspan="6" class="text-center text-muted py-4">
                                    <i class="bi bi-folder2"></i>
                                    <br>Selecione um disco para começar
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Estatísticas -->
<div class="row mt-3">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-md-3">
                        <div class="border-end">
                            <h5 class="text-primary" id="totalItems">0</h5>
                            <small class="text-muted">Total de Itens</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="border-end">
                            <h5 class="text-success" id="totalDirectories">0</h5>
                            <small class="text-muted">Pastas</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="border-end">
                            <h5 class="text-info" id="totalFiles">0</h5>
                            <small class="text-muted">Arquivos</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <h5 class="text-warning" id="totalSize">0 B</h5>
                        <small class="text-muted">Tamanho Total</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para criar pasta -->
<div class="modal fade" id="createFolderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-folder-plus"></i> Criar Nova Pasta
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createFolderForm">
                    <div class="mb-3">
                        <label for="folderName" class="form-label">Nome da Pasta:</label>
                        <input type="text" class="form-control" id="folderName" required>
                        <div class="form-text">A pasta será criada em: <code id="createFolderPath"></code></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="submitCreateFolder()">Criar Pasta</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para renomear -->
<div class="modal fade" id="renameModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-pencil"></i> Renomear Item
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="renameForm">
                    <div class="mb-3">
                        <label for="newName" class="form-label">Novo Nome:</label>
                        <input type="text" class="form-control" id="newName" required>
                        <div class="form-text">Item: <code id="renameItemPath"></code></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="submitRename()">Renomear</button>
            </div>
        </div>
    </div>
</div>



<script>
// Variáveis globais
let currentPath = '/mnt';
let showHiddenFiles = false;
let selectedDisk = null;

// Inicialização
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM carregado, iniciando aplicação...');
    loadDisks();
    setupEventListeners();
});

// Configurar event listeners
function setupEventListeners() {
    // Busca
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', debounce(function() {
        const query = this.value.trim();
        if (query.length > 2) {
            searchFiles(query);
        } else if (query.length === 0) {
            navigateToPath(currentPath);
        }
    }, 500));

    // Enter no modal de criar pasta
    document.getElementById('folderName').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            submitCreateFolder();
        }
    });

    // Enter no modal de renomear
    document.getElementById('newName').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            submitRename();
        }
    });
}

// Carregar discos disponíveis
async function loadDisks() {
    try {
        console.log('Carregando discos...');
        const response = await fetch('/filesystem/disks');
        console.log('Resposta recebida:', response.status);
        const data = await response.json();
        console.log('Dados recebidos:', data);
        
        if (data.success) {
            console.log('Exibindo discos:', data.disks.length);
            displayDisks(data.disks);
        } else {
            console.error('Erro na resposta:', data.error);
            showError('Erro ao carregar discos: ' + data.error);
        }
    } catch (error) {
        console.error('Erro ao carregar discos:', error);
        showError('Erro ao carregar discos');
    }
}

// Exibir discos
function displayDisks(disks) {
    console.log('Exibindo discos:', disks);
    const disksList = document.getElementById('disksList');
    console.log('Elemento disksList encontrado:', disksList);
    
    if (!disksList) {
        console.error('Elemento disksList não encontrado!');
        return;
    }
    
    disksList.innerHTML = '';
    
    disks.forEach(disk => {
        const diskItem = document.createElement('a');
        diskItem.href = '#';
        diskItem.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-center';
        diskItem.onclick = () => navigateToPath(disk.path);
        
        const diskInfo = document.createElement('div');
        diskInfo.className = 'flex-grow-1';
        
        const diskName = document.createElement('div');
        diskName.className = 'fw-bold';
        diskName.innerHTML = `<i class="bi bi-hdd"></i> ${disk.name}`;
        
        const diskPath = document.createElement('div');
        diskPath.className = 'small text-muted';
        diskPath.textContent = disk.path;
        
        const diskSize = document.createElement('div');
        diskSize.className = 'small text-muted';
        diskSize.textContent = `Livre: ${formatBytes(disk.freeSpace)}`;
        
        diskInfo.appendChild(diskName);
        diskInfo.appendChild(diskPath);
        diskInfo.appendChild(diskSize);
        
        const diskBadge = document.createElement('span');
        diskBadge.className = `badge bg-${getDiskTypeColor(disk.type)} rounded-pill`;
        diskBadge.textContent = disk.type;
        
        diskItem.appendChild(diskInfo);
        diskItem.appendChild(diskBadge);
        disksList.appendChild(diskItem);
    });
}

// Navegar para um caminho
async function navigateToPath(path) {
    try {
        currentPath = path;
        updateBreadcrumbs(path);
        updateCurrentPathDisplay(path);
        
        const response = await fetch(`/filesystem/navigate?path=${encodeURIComponent(path)}&showHidden=${showHiddenFiles}`);
        const data = await response.json();
        
        if (data.success) {
            displayFiles(data.navigation);
            updateStats(data.navigation.stats);
        } else {
            showError('Erro ao navegar: ' + data.error);
        }
    } catch (error) {
        console.error('Erro ao navegar:', error);
        showError('Erro ao navegar na pasta');
    }
}

// Exibir arquivos e pastas
function displayFiles(navigation) {
    const filesList = document.getElementById('filesList');
    filesList.innerHTML = '';
    
    if (navigation.items.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td colspan="6" class="text-center text-muted py-4">
                <i class="bi bi-folder2"></i>
                <br>Pasta vazia
            </td>
        `;
        filesList.appendChild(emptyRow);
        return;
    }
    
    navigation.items.forEach(item => {
        const row = document.createElement('tr');
        row.className = 'file-item';
        
        const iconCell = document.createElement('td');
        iconCell.innerHTML = getItemIcon(item);
        
        const nameCell = document.createElement('td');
        const nameLink = document.createElement('a');
        nameLink.href = '#';
        nameLink.className = 'text-decoration-none';
        nameLink.textContent = item.name;
        
        if (item.isDirectory) {
            nameLink.onclick = () => navigateToPath(item.path);
        } else {
            nameLink.onclick = () => downloadFile(item.path);
        }
        
        nameCell.appendChild(nameLink);
        
        const sizeCell = document.createElement('td');
        sizeCell.textContent = item.sizeFormatted;
        
        const modifiedCell = document.createElement('td');
        modifiedCell.textContent = new Date(item.modified).toLocaleString('pt-BR');
        
        const permissionsCell = document.createElement('td');
        permissionsCell.innerHTML = `<code>${item.permissions}</code>`;
        
        const actionsCell = document.createElement('td');
        actionsCell.innerHTML = getItemActions(item);
        
        row.appendChild(iconCell);
        row.appendChild(nameCell);
        row.appendChild(sizeCell);
        row.appendChild(modifiedCell);
        row.appendChild(permissionsCell);
        row.appendChild(actionsCell);
        
        filesList.appendChild(row);
    });
}

// Obter ícone do item
function getItemIcon(item) {
    if (item.isDirectory) {
        return '<i class="bi bi-folder2 text-warning"></i>';
    } else if (item.isSymbolicLink) {
        return '<i class="bi bi-link text-info"></i>';
    } else {
        const ext = item.name.split('.').pop().toLowerCase();
        if (['mp4', 'avi', 'mkv', 'mov'].includes(ext)) {
            return '<i class="bi bi-camera-video text-danger"></i>';
        } else if (['mp3', 'wav', 'flac'].includes(ext)) {
            return '<i class="bi bi-music-note text-success"></i>';
        } else if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) {
            return '<i class="bi bi-image text-primary"></i>';
        } else {
            return '<i class="bi bi-file-earmark text-secondary"></i>';
        }
    }
}

// Obter ações do item
function getItemActions(item) {
    const actions = [];
    
    if (item.isDirectory) {
        actions.push(`
            <button class="btn btn-sm btn-outline-primary" onclick="navigateToPath('${item.path}')" title="Abrir">
                <i class="bi bi-folder2-open"></i>
            </button>
        `);
    } else {
        actions.push(`
            <button class="btn btn-sm btn-outline-success" onclick="downloadFile('${item.path}')" title="Baixar">
                <i class="bi bi-download"></i>
            </button>
        `);
    }
    
    actions.push(`
        <button class="btn btn-sm btn-outline-warning" onclick="renameItem('${item.path}', '${item.name}')" title="Renomear">
            <i class="bi bi-pencil"></i>
        </button>
    `);
    
    return actions.join(' ');
}

// Atualizar breadcrumbs
function updateBreadcrumbs(currentPath) {
    const breadcrumb = document.getElementById('breadcrumb');
    breadcrumb.innerHTML = '<li class="breadcrumb-item"><a href="#" onclick="navigateToPath(\'/\')"><i class="bi bi-house"></i> Início</a></li>';
    
    if (currentPath === '/') return;
    
    const parts = currentPath.split('/').filter(part => part);
    let currentFullPath = '';
    
    parts.forEach((part, index) => {
        currentFullPath += (index === 0 ? '' : '/') + part;
        const isLast = index === parts.length - 1;
        
        const breadcrumbItem = document.createElement('li');
        breadcrumbItem.className = `breadcrumb-item ${isLast ? 'active' : ''}`;
        
        if (isLast) {
            breadcrumbItem.textContent = part;
        } else {
            const link = document.createElement('a');
            link.href = '#';
            link.textContent = part;
            link.onclick = () => navigateToPath(currentFullPath);
            breadcrumbItem.appendChild(link);
        }
        
        breadcrumb.appendChild(breadcrumbItem);
    });
}

// Atualizar display do caminho atual
function updateCurrentPathDisplay(path) {
    document.getElementById('currentPathDisplay').textContent = path;
}

// Atualizar estatísticas
function updateStats(stats) {
    document.getElementById('totalItems').textContent = stats.totalItems;
    document.getElementById('totalDirectories').textContent = stats.directories;
    document.getElementById('totalFiles').textContent = stats.files;
    document.getElementById('totalSize').textContent = formatBytes(stats.totalSize);
}

// Navegar para pasta pai
function navigateToParent() {
    if (currentPath === '/') return;
    const parentPath = currentPath.split('/').slice(0, -1).join('/') || '/';
    navigateToPath(parentPath);
}

// Navegar para início
function navigateToHome() {
    navigateToPath('/mnt');
}

// Criar pasta
function createFolder() {
    document.getElementById('createFolderPath').textContent = currentPath;
    document.getElementById('folderName').value = '';
    
    const modal = new bootstrap.Modal(document.getElementById('createFolderModal'));
    modal.show();
}

// Submeter criação de pasta
async function submitCreateFolder() {
    const folderName = document.getElementById('folderName').value.trim();
    
    if (!folderName) {
        showError('Nome da pasta é obrigatório');
        return;
    }
    
    try {
        const response = await fetch('/filesystem/create-folder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                parentPath: currentPath,
                folderName: folderName
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Pasta criada com sucesso!');
            navigateToPath(currentPath); // Recarregar
            bootstrap.Modal.getInstance(document.getElementById('createFolderModal')).hide();
        } else {
            showError('Erro ao criar pasta: ' + data.error);
        }
    } catch (error) {
        console.error('Erro ao criar pasta:', error);
        showError('Erro ao criar pasta');
    }
}

// Renomear item
function renameItem(itemPath, currentName) {
    document.getElementById('renameItemPath').textContent = itemPath;
    document.getElementById('newName').value = currentName;
    
    const modal = new bootstrap.Modal(document.getElementById('renameModal'));
    modal.show();
}

// Submeter renomeação
async function submitRename() {
    const newName = document.getElementById('newName').value.trim();
    const itemPath = document.getElementById('renameItemPath').textContent;
    
    if (!newName) {
        showError('Novo nome é obrigatório');
        return;
    }
    
    try {
        const response = await fetch('/filesystem/rename', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                oldPath: itemPath,
                newName: newName
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('Item renomeado com sucesso!');
            navigateToPath(currentPath); // Recarregar
            bootstrap.Modal.getInstance(document.getElementById('renameModal')).hide();
        } else {
            showError('Erro ao renomear: ' + data.error);
        }
    } catch (error) {
        console.error('Erro ao renomear:', error);
        showError('Erro ao renomear item');
    }
}



// Download de arquivo
function downloadFile(filePath) {
    window.open(`/filesystem/download?path=${encodeURIComponent(filePath)}`, '_blank');
}

// Buscar arquivos
async function searchFiles(query) {
    try {
        const response = await fetch(`/filesystem/search?path=${encodeURIComponent(currentPath)}&query=${encodeURIComponent(query)}&recursive=true`);
        const data = await response.json();
        
        if (data.success) {
            displaySearchResults(data.results, query);
        } else {
            showError('Erro na busca: ' + data.error);
        }
    } catch (error) {
        console.error('Erro na busca:', error);
        showError('Erro na busca');
    }
}

// Exibir resultados da busca
function displaySearchResults(results, query) {
    const filesList = document.getElementById('filesList');
    filesList.innerHTML = '';
    
    if (results.length === 0) {
        const emptyRow = document.createElement('tr');
        emptyRow.innerHTML = `
            <td colspan="6" class="text-center text-muted py-4">
                <i class="bi bi-search"></i>
                <br>Nenhum resultado para "${query}"
            </td>
        `;
        filesList.appendChild(emptyRow);
        return;
    }
    
    results.forEach(item => {
        const row = document.createElement('tr');
        row.className = 'file-item';
        
        const iconCell = document.createElement('td');
        iconCell.innerHTML = getItemIcon(item);
        
        const nameCell = document.createElement('td');
        const nameLink = document.createElement('a');
        nameLink.href = '#';
        nameLink.className = 'text-decoration-none';
        nameLink.textContent = item.name;
        nameLink.onclick = () => navigateToPath(item.path.split('/').slice(0, -1).join('/') || '/');
        
        const relativePath = document.createElement('div');
        relativePath.className = 'small text-muted';
        relativePath.textContent = item.relativePath;
        
        nameCell.appendChild(nameLink);
        nameCell.appendChild(relativePath);
        
        const sizeCell = document.createElement('td');
        sizeCell.textContent = item.sizeFormatted;
        
        const modifiedCell = document.createElement('td');
        modifiedCell.textContent = new Date(item.modified).toLocaleString('pt-BR');
        
        const permissionsCell = document.createElement('td');
        permissionsCell.innerHTML = `<code>${item.isDirectory ? 'd' : '-'}rwxr-xr-x</code>`;
        
        const actionsCell = document.createElement('td');
        actionsCell.innerHTML = getItemActions(item);
        
        row.appendChild(iconCell);
        row.appendChild(nameCell);
        row.appendChild(sizeCell);
        row.appendChild(modifiedCell);
        row.appendChild(permissionsCell);
        row.appendChild(actionsCell);
        
        filesList.appendChild(row);
    });
}

// Atualizar caminho atual
function refreshCurrentPath() {
    navigateToPath(currentPath);
}

// Alternar arquivos ocultos
function toggleHiddenFiles() {
    showHiddenFiles = !showHiddenFiles;
    navigateToPath(currentPath);
}

// Selecionar pasta atual
function selectCurrentPath() {
    // TODO: Implementar seleção de pasta para downloads
    showSuccess(`Pasta selecionada: ${currentPath}`);
}

// Funções utilitárias
function getDiskTypeColor(type) {
    const colors = {
        'system': 'danger',
        'mnt': 'primary',
        'media': 'success',
        'project': 'info'
    };
    return colors[type] || 'secondary';
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Funções de notificação
function showSuccess(message) {
    showNotification('Sucesso', message, 'success');
}

function showError(message) {
    showNotification('Erro', message, 'error');
}

function showWarning(message) {
    showNotification('Aviso', message, 'warning');
}

function showInfo(message) {
    showNotification('Informação', message, 'info');
}

function showNotification(title, message, type = 'info') {
    const container = document.getElementById('notificationContainer');
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    notification.innerHTML = `
        <div class="notification-header">
            <h6 class="notification-title">${title}</h6>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
        <p class="notification-message">${message}</p>
        <div class="notification-progress"></div>
    `;
    
    container.appendChild(notification);
    
    // Auto-remover após 5 segundos
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}



// Função de teste para debug
function testLoadDisks() {
    console.log('Testando carregamento de discos...');
    console.log('Elemento disksList:', document.getElementById('disksList'));
    console.log('Chamando loadDisks...');
    loadDisks();
}
</script>
